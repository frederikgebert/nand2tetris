// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx
    Not16(in=x, out=x1);
    And16(a=x, b=x1, out=x2);
    Mux16(a=x, b=x2, sel=zx, out=x3);
    // nx
    Not16(in=x3, out=x4);
    Mux16(a=x3, b=x4, sel=nx, out=x5);
    // zy
    Not16(in=y, out=y1);
    And16(a=y, b=y1, out=y2);
    Mux16(a=y, b=y2, sel=zy, out=y3);
    // ny
    Not16(in=y3, out=y4);
    Mux16(a=y3, b=y4, sel=ny, out=y5);
    // f
    Add16(a=x5, b=y5, out=xaddy);
    And16(a=x5, b=y5, out=xandy);
    Mux16(a=xandy, b=xaddy, sel=f, out=outf);
    // no
    Not16(in=outf, out=noutf);
    Mux16(a=outf, b=noutf, sel=no, 
          out=out,
          out[0..7]=out07,
          out[8..15]=out815,
    // ng
          out[15]=ng);
    // zr
    Or8Way(in=out07, out=t0);
    Or8Way(in=out815, out=t1);
    Or(a=t0, b=t1, out=t2);
    Not(in=t2, out=zr);
}